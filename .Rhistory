# ------------------------------- DATA LOADING -----------------------------------------------
prvdate <- as.character(as.Date(today)-dayslag)
pos_loc <- paste(main_loc,filenm, sep="")
pos_data <- data.frame(read.table(pos_loc, header = TRUE, sep = ","))
instr <- getFX(mkt_sym,from=prvdate)
# ------------------------------- DATA HANDLING AND MANIPULATION -----------------------------------------------
# Storing all market data in a list as data frames
mkt_list <- list()
for (ii in 1:length(mkt_sym)){
mkt_list[[ii]] <- get(gsub("/","",mkt_sym[ii]))
mkt_list[[ii]] <- data.frame(dates = index(mkt_list[[ii]]),mkt_list[[ii]])
}
# Creating a data frame with synchronous data
mkt_data <- data.frame(mkt_list[[1]])
row.names(mkt_data) <- NULL
for (ii in 3:(length(mkt_sym)+1)){
mkt_data[,ii] <- mkt_list[[ii-1]][match(mkt_data$dates,mkt_list[[ii-1]]$dates),2]
}
colnames(mkt_data) <-c("dates",gsub("/","",mkt_sym))
# Cleaning workspace
for (ii in 1:length(instr)){
rm(list = instr[[ii]])
}
rm(mkt_list)
# ------------------------------- SIMULATION -----------------------------------------------
fx_crate = fx_rate("EUR","GBP",today,mkt_data=mkt_data)
View(mkt_data)
View(fx_crate)
date = today
mkt_data[match(date,mkt_data[,1]),]
match(date,mkt_data[,1])
date
mkt_data[,1]
mkt_data[match(as.Date(date),as.Date(mkt_data[,1])),]
fx_rate <- function(ccy1,ccy2,date,mkt_data){
date = today
avlbl_rates = colnames(mkt_data)
current_rates = mkt_data[match(as.Date(date),as.Date(mkt_data[,1])),]
}
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
?unclass()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1
if(x > 5) {
x <- 0
}
x <- 1:2
if(x > c(5,3) {
x <- 0
}
x <- 1:2
if(x > c(5,3)) {
x <- 0
}
x <- 1:2
if(x > 5 {
x <- 0
}
x <- 1:2
if(x > 5) {
x <- 0
}
rm(x)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
rm(x,y)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(quantmod)
library(xlsx)
library(ggplot2)
rm(list = ls())
today <- "2017-02-25"
prvdate <- as.character(as.Date(today)-30)
getFX(c("EUR/GBP","EUR/USD","USD/JPY"),from=prvdate)
getFX("XAU/USD",from=prvdate)
#plotting EURGBP with ggplot2
tmpData = data.frame(dates = index(EURGBP),EURGBP,EURUSD)
ggplot(tmpData, aes(x = dates, y= EUR.GBP))+
geom_line(aes(y=EUR.GBP))
#plotting EURGBP with quantmod
bx <- layout(matrix(c(1,2,3,4),2,2, byrow = TRUE))
chart_Series(EURGBP)
chart_Series(EURUSD)
chart_Series(XAUUSD)
chart_Series(USDJPY)
library(quantmod)
library(xlsx)
library(ggplot2)
rm(list = ls())
# ------------------------------- INPUTS -----------------------------------------------
# General & Market Data
today <- "2017-02-23"
dayslag <- 360*5
main_loc <- "D:/GithubLocal/mainworking/"
filenm <- "pos_data.csv"
mkt_sym = c("EUR/GBP","EUR/USD","USD/JPY","XAU/USD","USD/CHF","USD/GBP")
source(paste(main_loc,"Functions.R",sep = ""))
# Simulation
rep_ccy <- "GBP"
sim_st <- as.character(as.Date(today)-dayslag)
sim_e <- today
value <- today
# ------------------------------- DATA LOADING -----------------------------------------------
prvdate <- as.character(as.Date(today)-dayslag)
pos_loc <- paste(main_loc,filenm, sep="")
pos_data <- data.frame(read.table(pos_loc, header = TRUE, sep = ","))
instr <- getFX(mkt_sym,from=prvdate)
# ------------------------------- DATA HANDLING AND MANIPULATION -----------------------------------------------
# Storing all market data in a list as data frames
mkt_list <- list()
for (ii in 1:length(mkt_sym)){
mkt_list[[ii]] <- get(gsub("/","",mkt_sym[ii]))
mkt_list[[ii]] <- data.frame(dates = index(mkt_list[[ii]]),mkt_list[[ii]])
}
# Creating a data frame with synchronous data
mkt_data <- data.frame(mkt_list[[1]])
row.names(mkt_data) <- NULL
for (ii in 3:(length(mkt_sym)+1)){
mkt_data[,ii] <- mkt_list[[ii-1]][match(mkt_data$dates,mkt_list[[ii-1]]$dates),2]
}
colnames(mkt_data) <-c("dates",gsub("/","",mkt_sym))
# Cleaning workspace
for (ii in 1:length(instr)){
rm(list = instr[[ii]])
}
rm(mkt_list)
# ------------------------------- SIMULATION -----------------------------------------------
fx_crate = fx_rate("EUR","GBP",today,mkt_data=mkt_data)
pos_data[,4] <- fx_rate(pos_data[,3],rep_ccy,today,mkt_data=mkt_data)
View(pos_data)
View(pos_data)
colnames(pos_data[,4]) <- paste("CCY",rep_ccy, sep="")
colnames(pos_data)[4] <- paste("CCY",rep_ccy,sep="")
View(pos_data)
colnames(pos_data)[1] <- "Instrument"
View(pos_data)
library(quantmod)
library(xlsx)
library(ggplot2)
rm(list = ls())
# ------------------------------- INPUTS -----------------------------------------------
# General & Market Data
today <- "2017-02-23"
dayslag <- 360*5
main_loc <- "D:/GithubLocal/mainworking/"
filenm <- "pos_data.csv"
mkt_sym = c("EUR/GBP","EUR/USD","USD/JPY","XAU/USD","USD/CHF","USD/GBP")
source(paste(main_loc,"Functions.R",sep = ""))
# Simulation
rep_ccy <- "GBP"
sim_st <- as.character(as.Date(today)-dayslag)
sim_e <- today
value <- today
# ------------------------------- DATA LOADING -----------------------------------------------
prvdate <- as.character(as.Date(today)-dayslag)
pos_loc <- paste(main_loc,filenm, sep="")
pos_data <- data.frame(read.table(pos_loc, header = TRUE, sep = ","))
colnames(pos_data)[1] <- "Instrument"
instr <- getFX(mkt_sym,from=prvdate)
# ------------------------------- DATA HANDLING AND MANIPULATION -----------------------------------------------
# Storing all market data in a list as data frames
mkt_list <- list()
for (ii in 1:length(mkt_sym)){
mkt_list[[ii]] <- get(gsub("/","",mkt_sym[ii]))
mkt_list[[ii]] <- data.frame(dates = index(mkt_list[[ii]]),mkt_list[[ii]])
}
# Creating a data frame with synchronous data
mkt_data <- data.frame(mkt_list[[1]])
row.names(mkt_data) <- NULL
for (ii in 3:(length(mkt_sym)+1)){
mkt_data[,ii] <- mkt_list[[ii-1]][match(mkt_data$dates,mkt_list[[ii-1]]$dates),2]
}
colnames(mkt_data) <-c("dates",gsub("/","",mkt_sym))
# Cleaning workspace
for (ii in 1:length(instr)){
rm(list = instr[[ii]])
}
rm(mkt_list)
# ------------------------------- SIMULATION -----------------------------------------------
fx_crate = fx_rate("EUR","GBP",today,mkt_data=mkt_data)
pos_data[,4] <- fx_rate(pos_data[,3],rep_ccy,today,mkt_data=mkt_data)
colnames(pos_data)[4] <- paste("CCY",rep_ccy,sep="")
View(pos_data)
View(mkt_data)
?norm()
?Random
row(mkt_data)
nrow(mkt_data)
simlen <- 5000
unifextr <- runif(simlen,min=1, max = nrow(mkt_data))
test <- mkt_data[unifextr,]
View(test)
View(pos_data)
library(quantmod)
library(xlsx)
library(ggplot2)
rm(list = ls())
# ------------------------------- INPUTS -----------------------------------------------
# General & Market Data
today <- "2017-02-23"
dayslag <- 360*5
main_loc <- "D:/GithubLocal/mainworking/"
filenm <- "pos_data.csv"
mkt_sym = c("EUR/GBP","EUR/USD","USD/JPY","XAU/USD","USD/CHF","USD/GBP")
source(paste(main_loc,"Functions.R",sep = ""))
# Simulation
rep_ccy <- "GBP"
sim_st <- as.character(as.Date(today)-dayslag)
sim_e <- today
value <- today
simlen <- 5000
# ------------------------------- DATA LOADING -----------------------------------------------
prvdate <- as.character(as.Date(today)-dayslag)
pos_loc <- paste(main_loc,filenm, sep="")
pos_data <- data.frame(read.table(pos_loc, header = TRUE, sep = ","))
colnames(pos_data)[1] <- "Instrument"
instr <- getFX(mkt_sym,from=prvdate)
# ------------------------------- DATA HANDLING AND MANIPULATION -----------------------------------------------
# Storing all market data in a list as data frames
mkt_list <- list()
for (ii in 1:length(mkt_sym)){
mkt_list[[ii]] <- get(gsub("/","",mkt_sym[ii]))
mkt_list[[ii]] <- data.frame(dates = index(mkt_list[[ii]]),mkt_list[[ii]])
}
# Creating a data frame with synchronous data
mkt_data <- data.frame(mkt_list[[1]])
row.names(mkt_data) <- NULL
for (ii in 3:(length(mkt_sym)+1)){
mkt_data[,ii] <- mkt_list[[ii-1]][match(mkt_data$dates,mkt_list[[ii-1]]$dates),2]
}
colnames(mkt_data) <-c("dates",gsub("/","",mkt_sym))
# Cleaning workspace
for (ii in 1:length(instr)){
rm(list = instr[[ii]])
}
rm(mkt_list)
# ------------------------------- SIMULATION -----------------------------------------------
fx_crate = fx_rate("EUR","GBP",today,mkt_data=mkt_data)
pos_data[,4] <- fx_rate(pos_data[,3],rep_ccy,today,mkt_data=mkt_data)
colnames(pos_data)[4] <- paste("CCY",rep_ccy,sep="")
unifextr <- runif(simlen,min=1, max = nrow(mkt_data))
test <- mkt_data[unifextr,]
View(mkt_data)
?ln
?log()
View(mkt_data)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:7])
View(mkt_ret)
log(mkt_data[1:nrow(mkt_data)-1,2:7])
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:7])-log(mkt_data[1:nrow(mkt_data)-1,2:7])
View(mkt_ret)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2::ncol(mkt_data)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
View(mkt_data)
View(mkt_ret)
mkt_ret <- mkt_ret *100
View(mkt_ret)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
plot(mkt_ret)
plot(mkt_ret[,1])
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
plot(mkt_ret[,1])
mkt_ret[,1] <- mkt_data[,1]
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
rm(mkt_ret)
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
mkt_ret <- data.frame()
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
mkt_ret <- mkt_data[2:nrow(mkt_data),1]
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
mkt_ret <- data.frame()
mkt_ret <- mkt_data[2:nrow(mkt_data),1]
mkt_ret <- data.frame()
mkt_ret <- mkt_data[2:nrow(mkt_data),1]
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
mkt_ret <- data.frame(mkt_data[2:nrow(mkt_data),1])
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
View(mkt_ret)
View(mkt_data)
mkt_ret <- data.frame(mkt_data[2:nrow(mkt_data),1])
colnames(mkt_ret) <- "dates"
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
View(mkt_ret)
View(mkt_ret)
unifextr <- runif(simlen,min=1, max = nrow(mkt_ret))
test <- mkt_ret[unifextr,]
View(test)
mkt_ret[24,]
mkt_ret[1516,]
x<- 1:5
lapply(x,runif)
lapply(x,runif, min=0, max=10)
x <- matrix(C(1,2,3), c(4,5,6))
x <- list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
lapply(x,function(asd) asd[,2])
x<- 1:5
lapply(x,mean)
sapply(x,mean)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
x<- 1:5
lapply(x,mean)
sapply(x,mean)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
mapply(rnorm, 1:5,1:5,2)
x<- c(rnorm(10), runif(10),rnorm(10,1))
x<- c(rnorm(10), runif(10),rnorm(10,1))
f<- gl(3,10)
?tapply
tapply(x,f,mean)
split(x,f)
lapply(split(x,f),mean)
x<- rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
interaction(f1,f2)
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop = T))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinv <- function(inv_matrix) inv <<- inv_matrix
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting chached inverse matrix")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinv(inv)
inv
}
?matrix
x <- matrix(1:16,4,4)
x
y <- makeCacheMatrix(x)
inv1 <- solve (y)
inv1 <- solve (x)
?runif
x <- matrix(runif(16),4,4)
y <- makeCacheMatrix(x)
inv1 <- solve (x)
inv2 <- cacheSolve(y)
inv1
inv2
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
getwd()
setwd("D:/GithubLocal/datasciencecoursera/")
if (file.exists("asd")){
dir.create("asd")
}
setwd("D:/GithubLocal/datasciencecoursera/")
if (file.exists("asd")){
dir.create("asd")
}
list.files()
if (!file.exists("asd")){
dir.create("asd")
}
