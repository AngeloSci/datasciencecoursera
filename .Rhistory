pos_data <- data.frame(read.table(pos_loc, header = TRUE, sep = ","))
colnames(pos_data)[1] <- "Instrument"
instr <- getFX(mkt_sym,from=prvdate)
# ------------------------------- DATA HANDLING AND MANIPULATION -----------------------------------------------
# Storing all market data in a list as data frames
mkt_list <- list()
for (ii in 1:length(mkt_sym)){
mkt_list[[ii]] <- get(gsub("/","",mkt_sym[ii]))
mkt_list[[ii]] <- data.frame(dates = index(mkt_list[[ii]]),mkt_list[[ii]])
}
# Creating a data frame with synchronous data
mkt_data <- data.frame(mkt_list[[1]])
row.names(mkt_data) <- NULL
for (ii in 3:(length(mkt_sym)+1)){
mkt_data[,ii] <- mkt_list[[ii-1]][match(mkt_data$dates,mkt_list[[ii-1]]$dates),2]
}
colnames(mkt_data) <-c("dates",gsub("/","",mkt_sym))
# Cleaning workspace
for (ii in 1:length(instr)){
rm(list = instr[[ii]])
}
rm(mkt_list)
# ------------------------------- SIMULATION -----------------------------------------------
fx_crate = fx_rate("EUR","GBP",today,mkt_data=mkt_data)
pos_data[,4] <- fx_rate(pos_data[,3],rep_ccy,today,mkt_data=mkt_data)
colnames(pos_data)[4] <- paste("CCY",rep_ccy,sep="")
View(pos_data)
View(mkt_data)
?norm()
?Random
row(mkt_data)
nrow(mkt_data)
simlen <- 5000
unifextr <- runif(simlen,min=1, max = nrow(mkt_data))
test <- mkt_data[unifextr,]
View(test)
View(pos_data)
library(quantmod)
library(xlsx)
library(ggplot2)
rm(list = ls())
# ------------------------------- INPUTS -----------------------------------------------
# General & Market Data
today <- "2017-02-23"
dayslag <- 360*5
main_loc <- "D:/GithubLocal/mainworking/"
filenm <- "pos_data.csv"
mkt_sym = c("EUR/GBP","EUR/USD","USD/JPY","XAU/USD","USD/CHF","USD/GBP")
source(paste(main_loc,"Functions.R",sep = ""))
# Simulation
rep_ccy <- "GBP"
sim_st <- as.character(as.Date(today)-dayslag)
sim_e <- today
value <- today
simlen <- 5000
# ------------------------------- DATA LOADING -----------------------------------------------
prvdate <- as.character(as.Date(today)-dayslag)
pos_loc <- paste(main_loc,filenm, sep="")
pos_data <- data.frame(read.table(pos_loc, header = TRUE, sep = ","))
colnames(pos_data)[1] <- "Instrument"
instr <- getFX(mkt_sym,from=prvdate)
# ------------------------------- DATA HANDLING AND MANIPULATION -----------------------------------------------
# Storing all market data in a list as data frames
mkt_list <- list()
for (ii in 1:length(mkt_sym)){
mkt_list[[ii]] <- get(gsub("/","",mkt_sym[ii]))
mkt_list[[ii]] <- data.frame(dates = index(mkt_list[[ii]]),mkt_list[[ii]])
}
# Creating a data frame with synchronous data
mkt_data <- data.frame(mkt_list[[1]])
row.names(mkt_data) <- NULL
for (ii in 3:(length(mkt_sym)+1)){
mkt_data[,ii] <- mkt_list[[ii-1]][match(mkt_data$dates,mkt_list[[ii-1]]$dates),2]
}
colnames(mkt_data) <-c("dates",gsub("/","",mkt_sym))
# Cleaning workspace
for (ii in 1:length(instr)){
rm(list = instr[[ii]])
}
rm(mkt_list)
# ------------------------------- SIMULATION -----------------------------------------------
fx_crate = fx_rate("EUR","GBP",today,mkt_data=mkt_data)
pos_data[,4] <- fx_rate(pos_data[,3],rep_ccy,today,mkt_data=mkt_data)
colnames(pos_data)[4] <- paste("CCY",rep_ccy,sep="")
unifextr <- runif(simlen,min=1, max = nrow(mkt_data))
test <- mkt_data[unifextr,]
View(mkt_data)
?ln
?log()
View(mkt_data)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:7])
View(mkt_ret)
log(mkt_data[1:nrow(mkt_data)-1,2:7])
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:7])-log(mkt_data[1:nrow(mkt_data)-1,2:7])
View(mkt_ret)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2::ncol(mkt_data)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
View(mkt_data)
View(mkt_ret)
mkt_ret <- mkt_ret *100
View(mkt_ret)
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
plot(mkt_ret)
plot(mkt_ret[,1])
mkt_ret <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
plot(mkt_ret[,1])
mkt_ret[,1] <- mkt_data[,1]
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
rm(mkt_ret)
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
mkt_ret <- data.frame()
mkt_ret[,1] <- mkt_data[2:nrow(mkt_data),1]
mkt_ret <- mkt_data[2:nrow(mkt_data),1]
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
mkt_ret <- data.frame()
mkt_ret <- mkt_data[2:nrow(mkt_data),1]
mkt_ret <- data.frame()
mkt_ret <- mkt_data[2:nrow(mkt_data),1]
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
mkt_ret <- data.frame(mkt_data[2:nrow(mkt_data),1])
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
View(mkt_ret)
View(mkt_data)
mkt_ret <- data.frame(mkt_data[2:nrow(mkt_data),1])
colnames(mkt_ret) <- "dates"
mkt_ret[,2:ncol(mkt_data)] <- log(mkt_data[2:nrow(mkt_data),2:ncol(mkt_data)])-log(mkt_data[1:nrow(mkt_data)-1,2:ncol(mkt_data)])
View(mkt_ret)
View(mkt_ret)
unifextr <- runif(simlen,min=1, max = nrow(mkt_ret))
test <- mkt_ret[unifextr,]
View(test)
mkt_ret[24,]
mkt_ret[1516,]
x<- 1:5
lapply(x,runif)
lapply(x,runif, min=0, max=10)
x <- matrix(C(1,2,3), c(4,5,6))
x <- list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
lapply(x,function(asd) asd[,2])
x<- 1:5
lapply(x,mean)
sapply(x,mean)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
x<- 1:5
lapply(x,mean)
sapply(x,mean)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
mapply(rnorm, 1:5,1:5,2)
x<- c(rnorm(10), runif(10),rnorm(10,1))
x<- c(rnorm(10), runif(10),rnorm(10,1))
f<- gl(3,10)
?tapply
tapply(x,f,mean)
split(x,f)
lapply(split(x,f),mean)
x<- rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
interaction(f1,f2)
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop = T))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
iv <<- NULL
}
get <- function() x
setinv <- function(inv_matrix) inv <<- inv_matrix
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting chached inverse matrix")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinv(inv)
inv
}
?matrix
x <- matrix(1:16,4,4)
x
y <- makeCacheMatrix(x)
inv1 <- solve (y)
inv1 <- solve (x)
?runif
x <- matrix(runif(16),4,4)
y <- makeCacheMatrix(x)
inv1 <- solve (x)
inv2 <- cacheSolve(y)
inv1
inv2
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
wb <- loadWorkbook(xlsFXexpname)
sheets <- getSheets(wb)
removeSheet(wb, sheetName = "Data2")
yourSheet <- createSheet(wb, sheetName="Data2")
addDataFrame(EURGBP, yourSheet, startRow = 6)
saveWorkbook(wb, xlsFXexpname)
#saving backup
file.copy(xlsFXexpname,backuppath, copy.date = TRUE)
#plotting EURGBP
chart_Series(EURGBP)
library(quantmod)
library(xlsx)
library(ggplot2)
xlspath <- "D:\\Dropbox\\FX Exposure\\"
xlsversion <-"FXExposure_v6"
xlsFXexpname <- paste(xlspath,xlsversion,".xlsm", sep="")
backupname <- paste(xlsversion," ",format(Sys.Date()),".xlsm", sep="")
backuppath <- paste(xlspath,"Backup + Old\\",backupname,sep="")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
getFX(c("EUR/GBP","EUR/USD"),from="2015-07-01")
getFX("EUR/GBP",from="2015-07-01")
?getFX
getFX("EUR/GBP",from="2015-08-01")
devtools::install_github("joshuaulrich/quantmod@144_getFX")
install.packages(quantmod)
install.packages("quantmod")
install.packages("quantmod")
getFX("EUR/GBP",from="2015-07-01")
library(quantmod)
getFX("EUR/GBP",from="2015-07-01")
getFX(c("EUR/GBP","EUR/USD"),to="2015-31-12",from="2015-07-01")
getFX(c("EUR/GBP","EUR/USD"),from="2015-10-01")
getFX(c("EUR/GBP","EUR/USD"),from="2015-12-01")
getFX(c("EUR/GBP","EUR/USD"),from="2016-12-01")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user = "genome", host ="genome-mysql.soe.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user = "genome", host ="genome-mysql.soe.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;", dbDisconnect(ucscDb))
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user = "genome", host ="genome-mysql.soe.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user = "genome", db= "hg19" ,host ="genome-mysql.soe.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
head(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
warning()
warnings()
affyData <- dbReadTable(hg19, "affyU133Plus2")
warnings()
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
View(affyMisSmall)
dim(affyMisSmall)
dbDisconnect(hg19)
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2,by=0.1), dim=c(5,2,2))
B
attr(B, "scale") <- "liter"
?attr
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0.1,1,length.out = 5))
df
df = data.frame(1L:5L,seq(0.1,1,length.out = 5),c("ab","cde","fghi","a","s"), stringsAsFactors = F)
df
h5write(df, "example.h5","df")
h5ls("example.h5")
readdf = h5read("example.h5","df")
readdf
h5write(c(12,13,14), "example.h5","foo/A",index=list(1:3,1))
h5write(c(12,13,14), "example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
h5write(c(12,13,14), "example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = url("http://scholar.google.com/citation?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
con = url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
library(httr)
html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText=T)
content2
parsedHtml
xpathSApply(parsedHtml,"//title",xlmValue)
xpathSApply(parsedHtml,"//title",xmlValue)
?xpathSApply
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg1
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "2f12338ec392cf3ec697",
secret = "3acda3d48e8e4a73ae8c75441c15378fb13ba4c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req$date
req$times
req$status_code
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "2f12338ec392cf3ec697",
secret = "3acda3d48e8e4a73ae8c75441c15378fb13ba4c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
install.packages("Rcpp")
library(httpuv)
library(Rcpp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
html = GET(url)
url <- http://biostat.jhsph.edu/~jleek/contact.html
html = GET(url)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html = GET(url)
content2 = content(html, as="text")
parsedHtml = htmlParse(content2, asText=T)
library(XML)
parsedHtml = htmlParse(content2, asText=T)
parsedHtml
size(parsedHtml)
dim(parsedHtml)
nchar(parsedHtml)
nchar(content2)
content2
test <- data.frame(parsedHtml)
root1 <- xmlRoot(parsedHtml)
test <- data.frame(root1)
xmlName(root1)
con = url(url)
htmlCode = readLines(con)
close(con)
htmlCode
dim(htmlCode)
nrow(htmlCode)
test <- data.frame(htmlCode)
View(test)
test <- data.frame(htmlCode)
result1 <- c(nchar(test[10,1]),nchar(test[20,1]),nchar(test[30,1]),nchar(test[100,1]))
test[20,1]
class(test[20,1])
test <- data.frame(htmlCode, stringsAsFactors = F)
result1 <- c(nchar(test[10,1]),nchar(test[20,1]),nchar(test[30,1]),nchar(test[100,1]))
result1
setwd("D:/GithubLocal/datasciencecoursera/")
read.table("C3W2Quiz_data.for")
?read.table
?read.fwf
read.fwf("C3W2Quiz_data.for",skip=4)
read.fwf("C3W2Quiz_data.for",,width=c(12, 7, 4, 9, 4, 9, 4, 9, 4),skip=4)
data <- read.fwf("C3W2Quiz_data.for",,width=c(12, 7, 4, 9, 4, 9, 4, 9, 4),skip=4)
View(data)
nchar(data[1,1])
nchar(data[1,2])
ff <- tempfile()
cat(file = ff, "123456", "987654", sep = "\n")
read.fwf(ff, widths = c(1,2,3))
read.fwf(ff, widths = c(1,-2,3))
sum(data[,4])
